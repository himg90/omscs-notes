<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CS7210 - Distributed Computing</title><link>https://www.digestnotes.com/</link><description>Recent content on CS7210 - Distributed Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://www.digestnotes.com/index.xml" rel="self" type="application/rss+xml"/><item><title>WIP</title><link>https://www.digestnotes.com/labs/framework/dslabs_client_to_server_communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/labs/framework/dslabs_client_to_server_communication/</guid><description>Route of a Command</description></item><item><title/><link>https://www.digestnotes.com/labs/lab02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/labs/lab02/</guid><description>Wait-Notify Semantics of Java Java has a builtin wait mechanism that enable threads to become inactive while waiting for signals. The class java.lang.Object defines three methods, wait(), notify(), and notifyAll(), to facilitate this. A thread that calls wait() on any object becomes inactive until another thread calls notify() on that object. In order to call either wait() or notify the calling thread must first obtain the lock on that object.</description></item><item><title>01 DSLabs Abstract Interface</title><link>https://www.digestnotes.com/labs/framework/01_framework_abstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/labs/framework/01_framework_abstraction/</guid><description>Important DSLabs Interfaces The system consists of a number of nodes which have addresses A Node can send() a message to another node. The receiving node has to handle() the message. Some nodes expose a client interface. An external user can interact with the distributed system by send()ing commandsand gettting results back. Application: Some nodes (server nodes) have contain an application object. An example of an application would be key-value in-memory store.</description></item><item><title>02 Workload</title><link>https://www.digestnotes.com/labs/framework/02_workload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/labs/framework/02_workload/</guid><description>Workload abstract class Workload { Pair&amp;lt;Command, Result&amp;gt; nextCommandAndResult() Command nextCommand() boolean hasNext() boolean hasResults() } A workload is an ordered collection of commands and expected results. Results are optional but commands are must. The test framework initializes a Workload and maps it to a client node. The framework executes one command at a time from the Workload on the client. If results are present in the workload, after every command, the result received from the client is compared against the expected result stored in the Workload.</description></item><item><title>03 - Time in D. Systems</title><link>https://www.digestnotes.com/lectures/lecture03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/lectures/lecture03/</guid><description>Introduction Distributed Systems cannot rely on Physical Clocks so they rely on Logical Clocks Why Do We Need Time There are many scenarios in which knowing the time can be helpful. For eg. checking the correctness of the program. Same operations executed in different Determining the order of operations executing in the system Checking correctness of the final state with the expected final state Why Is Measuring Time Hard in DS?</description></item><item><title>03 State Predicates</title><link>https://www.digestnotes.com/labs/framework/03_state_predicates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/labs/framework/03_state_predicates/</guid><description>State Predicate (Invariants) When the framework is running tests, it needs to know whether a test passed or failed. It does so by verifying that certain conditions are met. StatePredicate are those conditions
class StatePredicate extends java.util.Function.Predicate&amp;lt;AbstractState&amp;gt; { String name; Function&amp;lt;AbstractState, Pair&amp;lt;Boolean, String&amp;gt;&amp;gt; predicate; public boolean test(AbstractState state); public String detail(AbstractState state); public StatePredicate negate(); public StatePredicate and(StatePredicate other); public StatePredicate or(StatePredicate other); } java.util.Function.Predicate interface Predicate&amp;lt;T&amp;gt; { boolean test(T t); //default methods default Predicate&amp;lt;T&amp;gt; and(Predicate&amp;lt;?</description></item><item><title>04 - State in D. Systems</title><link>https://www.digestnotes.com/lectures/lecture04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/lectures/lecture04/</guid><description>Introduction Study challenges in maintaining state in a distributed system. Study capturing of snapshot of the global state of the Distributed System. This helps to understand what&amp;rsquo;s happening in the system and to calculate its properties Chandy - Lamport Algorithm Global State, Snapshots and Other Terminology Distributed system consists of a set of processes and communication channels between them. A Process has a series of events occurring.</description></item><item><title>05 - Consensus</title><link>https://www.digestnotes.com/lectures/lecture05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/lectures/lecture05/</guid><description>Link to Lecture Slides
Paper Trail: A Brief Tour of FLP Impossibility
Consensus What is Consensus? Ability of processes in a distributed processes to agree on something like the value of a variable current timestamp or point of computation taking an action etc. Why is it important? Important to make forward progress in distributed system. Reaching a consensus makes it possible for the system to be correct.</description></item><item><title>06 - Replication</title><link>https://www.digestnotes.com/lectures/lecture06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/lectures/lecture06/</guid><description>Goals of Replication State available at more than one node =&amp;gt; Fault-tolerance, Availability Service can be provided from more than one node =&amp;gt; Scalability Replication Modes Active Replication (all replicas read, write and update each other) Stand-by (Primary-backup) Replication (Only one replica reads and writes, rest just follow updates from primary) Replication Techniques State Replication Replicated State Machine Change in state is sent to other replicas The operation (event) is executed(applied) to every replica + No need to execute operation again + No need to transmit large state delta - Determining change in state can be complex and large - Operation needs to be executed and must be deterministic Replication and Consensus &amp;hellip;</description></item><item><title>07 - Fault Tolerance</title><link>https://www.digestnotes.com/lectures/lecture07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/lectures/lecture07/</guid><description>Some Taxonomy Fault-Error-Failure Fault is the problem (software bug, hardware failure) When fault is activated (because buggy part of code is executed), it causes errors Failure is the resulting behaviour Faults: Transient / Intermittent / Permanent Failures: Fail-stop / Timing / Omission / Byzantine Timing: System becomes &amp;ldquo;slow&amp;rdquo; Omission: some actions are missing like msg drops due to memory constraints Managing Failures: Avoidance / Detection / Recovery / Removal Detected failues are either removed by rollback or recovered from.</description></item><item><title>Consistency Tradeoffs</title><link>https://www.digestnotes.com/readings/extra/consistency_tradeoffs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/readings/extra/consistency_tradeoffs/</guid><description>Consistency Tradeoffs in Modern Distributed Database System Design By Daniel J. Abadi The main point that paper tries to put across is this:
Modern DDBS do not provide strong consistency guarantees under normal operations (absense of any faults) not because of CAP theorem but because of consistency-vs-Latency tradeoff. Consistency-vs-Latency tradeoff is more fundamental than CAP theorem because faults like network partitions are usually rare.</description></item><item><title>W02 - Logical Time</title><link>https://www.digestnotes.com/readings/w02_logical_time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/readings/w02_logical_time/</guid><description>Logical Time: A Way to Capture Causality in Distributed Systems - M. Raynal, M. Singha
A Way to Capture Causality in Distributed Systems Link to Paper
This paper is an easy read and not very long. Moreover, first few pages just repeat the same thing over and over. So, you can read through it in a couple of hours.
Big Ideas
Global/physical clocks donâ€™t work for distributed processes.</description></item><item><title>W03 - Consistent Global States</title><link>https://www.digestnotes.com/readings/w03_consistent_global_states/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/readings/w03_consistent_global_states/</guid><description>Consistent Global States of Distributed Systems Fundamental Concepts and Mechanisms Link to Paper
1 Introduction What is global state of a distributed system?
It is the union of the states of the individual processes.
Why do we study construction of global state?
A large class of problems in distributed computing can be cast as executing some action when the state of the system satisfies a particular condition.</description></item><item><title>W07 - Spanner</title><link>https://www.digestnotes.com/readings/w07spanner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.digestnotes.com/readings/w07spanner/</guid><description>Spanner FAQ Source: MIT 6.824 - Distributed Systems &amp;gt; Spanner FAQs
Q: What is time? A: 13:00:00.000 April 7th 2020 UTC is a time. Time advances at a steady rate of one second per second. Q: What is a clock? A: A clock is an oscillator driving a counter. The oscillator should tick at a steady known rate (e.g. one tick per second). The counter must initially be synchronized to a source of the correct time; after that, the oscillator's ticks cause the counter to advance the time.</description></item></channel></rss>