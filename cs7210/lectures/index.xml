<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lectures on CS7210 - Distributed Computing</title><link>https://himg90.github.io/omscs-notes/cs7210/lectures/</link><description>Recent content in Lectures on CS7210 - Distributed Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://himg90.github.io/omscs-notes/cs7210/lectures/index.xml" rel="self" type="application/rss+xml"/><item><title>03 Time in Distributed Systems</title><link>https://himg90.github.io/omscs-notes/cs7210/lectures/lecture03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://himg90.github.io/omscs-notes/cs7210/lectures/lecture03/</guid><description>Introduction Distributed Systems cannot rely on Physical Clocks so they rely on Logical Clocks Why Do We Need Time There are many scenarios in which knowing the time can be helpful. For eg. checking the correctness of the program. Same operations executed in different Determining the order of operations executing in the system Checking correctness of the final state with the expected final state Why Is Measuring Time Hard in DS?</description></item><item><title>06 Replication</title><link>https://himg90.github.io/omscs-notes/cs7210/lectures/lecture06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://himg90.github.io/omscs-notes/cs7210/lectures/lecture06/</guid><description>Goals of Replication State available at more than one node =&amp;gt; Fault-tolerance, Availability Service can be provided from more than one node =&amp;gt; Scalability Replication Modes Active Replication (all replicas read, write and update each other) Stand-by (Primary-backup) Replication (Only one replica reads and writes, rest just follow updates from primary) Replication Techniques State Replication Replicated State Machine Change in state is sent to other replicas The operation (event) is executed(applied) to every replica + No need to execute operation again + No need to transmit large state delta - Determining change in state can be complex and large - Operation needs to be executed and must be deterministic Replication and Consensus &amp;hellip;</description></item><item><title>07 Fault Tolerance</title><link>https://himg90.github.io/omscs-notes/cs7210/lectures/lecture07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://himg90.github.io/omscs-notes/cs7210/lectures/lecture07/</guid><description>Fault Tolerance Some Taxonomy Fault-Error-Failure Fault is the problem (software bug, hardware failure) When fault is activated (because buggy part of code is executed), it causes errors Failure is the resulting behaviour Faults: Transient / Intermittent / Permanent Failures: Fail-stop / Timing / Omission / Byzantine Timing: System becomes &amp;ldquo;slow&amp;rdquo; Omission: some actions are missing like msg drops due to memory constraints Managing Failures: Avoidance / Detection / Recovery / Removal Detected failues are either removed by rollback or recovered from.</description></item></channel></rss>