<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Consistency and Geo-Distributed Data Stores on CS7210 - Distributed Computing</title><link>https://www.digestnotes.com/topics/geo_distributed_data_stores/</link><description>Recent content in Consistency and Geo-Distributed Data Stores on CS7210 - Distributed Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Oct 2021 06:31:31 +0530</lastBuildDate><atom:link href="https://www.digestnotes.com/topics/geo_distributed_data_stores/index.xml" rel="self" type="application/rss+xml"/><item><title>Memcache</title><link>https://www.digestnotes.com/topics/geo_distributed_data_stores/memcache/</link><pubDate>Fri, 15 Oct 2021 06:31:31 +0530</pubDate><guid>https://www.digestnotes.com/topics/geo_distributed_data_stores/memcache/</guid><description>Scaling Memcache at Facebook Content taken from paper and presentation at Scaling Memcache at Facebook NSDI &amp;lsquo;13
Basics Writes Memcache needs to be invalidated after DB write Up to web application to specify which keys to invalidate after database update Reads Two orders of magnitude more reads than writes Common case is data is available in the cache Demand-filled look-aside cache Challenges Keeping database and cache in sync Protected database from cache failure.</description></item></channel></rss>