<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learnings on CS7210 - Distributed Computing</title><link>https://www.digestnotes.com/learning/</link><description>Recent content in Learnings on CS7210 - Distributed Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Oct 2021 10:30:29 +0530</lastBuildDate><atom:link href="https://www.digestnotes.com/learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Paxos And CAP</title><link>https://www.digestnotes.com/learning/paxos_and_cap/</link><pubDate>Sat, 16 Oct 2021 10:30:29 +0530</pubDate><guid>https://www.digestnotes.com/learning/paxos_and_cap/</guid><description>Paxos and CAP Theorem CAP theorem seems to suggest that under network partition, both consistency and availability cannot be achieved simultaneously. However, Paxos can provide strong consistency even under a network partition. Does it mean that Paxos contradicts CAP theorem?
CAP theorem is known to be misunderstood. There are three points to note. One is that the tradeoff between consistency and availablity only arises under network partition. It means that under normal operation (when there is no network partition) both consistency and availability are achievable.</description></item><item><title>High Availability vs. Fault Tolerance</title><link>https://www.digestnotes.com/learning/high_avail_vs_fault_tolerance/</link><pubDate>Sun, 10 Oct 2021 16:32:34 +0530</pubDate><guid>https://www.digestnotes.com/learning/high_avail_vs_fault_tolerance/</guid><description>High Availability vs. Fault Tolerance source
High Availability aims for your application to run 99.999% of the time. Its design ensures that the entire system can quickly recover if one of its components crashed. It has an ample number of redundant resources to allow failover to another resource if the other one fails. This concept accepts that a failure will occur but provides a way for the system to recover fast.</description></item></channel></rss>